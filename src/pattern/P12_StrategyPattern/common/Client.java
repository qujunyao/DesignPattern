package pattern.P12_StrategyPattern.common;

/**
 * 策略模式：场景类
 * 
 * 策略模式的定义：也叫政策模式，定义一组算法，将每个算法都封装起来，并且使他们之间可以互换。
 * 
 * 策略模式3个角色：
 * 1、Context封装类角色：也叫上下文角色，起承上启下封装作用，屏蔽高层模块对策略、算法的直接访问，封装可能存在的变化。
 * 2、Strategy抽象策略角色：策略、算法家族的抽象，通常定义为接口，定义每个策略或算法必须具有的方法与属性。
 * 3、ConcreteStrategy具体策略角色：实现抽象策略中的操作，该类含有具体的算法。
 * 
 * 优点：
 * 1、算法可以自由切换：这是策略模式本身定义的只要实现抽象策略，他就成为策略家族的一个成员
 * 2、避免使用多重条件判断：可以由其他模块决定采用何种策略，策略家族对外提供的访问接口就是封装类，简化了操作，同时避免了条件语句的判断。
 * 3、扩展性良好。
 * 
 * 缺点：
 * 1、策略类数量增多。
 * 2、所有的策略类都需要对外暴露。
 * 
 * 使用场景：
 * 1、多个类只有在算法或行为上稍有不同的场景。
 * 2、算法需要自由切换的场景。
 * 3、需要屏蔽算法规则的场景。
 * 
 * 策略模式的注意事项：
 * 如果具体的策略类超过4个以上，则需要考虑使用混合模式，解决策略膨胀和策略暴露问题。
 * 
 * @author Administrator
 *
 */
public class Client {
	public static void main(String[] args) {

		//声明一个具体的策略
		Strategy strategy = new ConcreteStrategy1();

		//声明上下文对象
		Context context = new Context(strategy);

		//执行封装后的方法
		context.doAnything();
		
	}

}
