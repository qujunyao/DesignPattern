package pattern.P17_FacadePattern;

/**
 * 门面模式：场景类
 * 
 * 定义：
 * 也叫外观模式，是一种比较常见的封装模式，其定义如下：要求一个子系统的外部与其内部的通讯必须通过一个统一的对象进行，门面模式提供一个高层次的接口使得子系统更易于使用。
 * 
 * 
 * 角色： 
 * 1、Facade门面角色：
 * 客户端可以调用这个角色的方法，此角色知晓子系统的所有功能和责任。一般情况下本角色会将所有从客户端发来的请求委派到响应的子系统去，也就是说该角色没有实际的业务逻辑，只是一个委托类。
 * 2、subsystem子系统角色：
 * 可以同时拥有一个或者多个子系统，每个子系统都不是一个单独的类，而是一个类的集合，子系统并不知道门面的存在，对于子系统而言，门面仅仅是另外一个客户端而已。
 * 
 * 有点：
 * 1、减少系统的相互依赖
 * 2、提高灵活性
 * 3、提高安全性
 * 
 * 缺点：
 * 最大缺点是不符合开闭原则，对修改关闭，对扩展开放。
 * 
 * 适用场景：
 * 1、为一个复杂的模块或者子系统提供一个外界访问的即口。
 * 2、子系统相对独立――外界对子系统的访问只要黑箱操作即可。
 * 3、预防低水平的人员带来的风险扩散。.
 * 
 * 注意事项：
 * 1、一个子系统可以有多个门面。
 * 2、门面不参与子系统内的业务逻辑。
 * 
 * @author Administrator
 *
 */
public class Client {

	public static void main(String[] args) {
		// 定义门面
		Facade facade = new Facade();
		// 调用子系统
		facade.methodA();
		facade.methodB();
		facade.methodC();
	}
}
